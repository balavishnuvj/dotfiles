ZSH_THEME="robbyrussell"

plugins=(git zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

export CDPATH=.:${HOME}:${HOME}/Workspace

gfind() {
    git branch --all | grep "$1"
}

glast() {
    defaultLimit="5"
    git reflog | egrep -io "moving from ([^[:space:]]+)" | awk '{ print $3 }' | awk ' !x[$0]++' | egrep -v '^[a-f0-9]{40}$' | head -n"${1:-$defaultLimit}"
}

gacp() {
    git add -A
    git commit -m "$1"
    git push
}

gcom() {
    git add -A
    git commit -m "$1"
}

gmr() {
    echo "Pushing to remote..."
    git push
    [[ -z "$2" ]] && {
        echo "Parameter 1 is empty"
        exit 0
    }
    echo "Creating PR..."
    gh pr create -t "$1" -b "$2"
    gh pr view --web
}

ghpr() {
    num_files=$(git diff --name-only | wc -l)
    read "?Are you sure you want to commit $num_files files? (y/n) " confirm
    if [[ $confirm != "y" ]]; then
        echo "Commit canceled."
        return
    fi
    echo "Committing $num_files files..."
    git add -A
    git commit -m "$1"
    gmr "$1" "$2"
}

gcph() {
    git commit -m "$1"
    git push
    [[ -z "$2" ]] && {
        echo "Parameter 1 is empty"
        exit 1
    }
    gh pr create -t "$1" -b "$2"
    gh pr view --web
}

gmain() {
    git fetch --all --prune
    MAIN_BRANCH=$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')
    git checkout $MAIN_BRANCH
    git pull
}

gsetup() {
    defaultEmail="hello@balavishnuvj.com"
    email="${1:-$defaultEmail}"
    git config user.name "Balavishnu V J"
    git config user.email $email
    echo "GIT set for $(git config user.name)<$(git config user.email)>"
}

rmr() {
    find . -name "$1" -type d -prune -exec rm -rf '{}' +
}

gclone() {
    git clone git@github.com-p:"$1"
}

gnuke() {
    git reset
    git checkout .
    git clean -df
}

function get_default_branch {
    # Get the name of the default branch for the remote repository
    DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | cut -d ":" -f 2 | tr -d '[:space:]')

    echo "$DEFAULT_BRANCH"
}

function has_uncommitted_changes {
    # Check if there are any uncommitted changes
    if [[ -n $(git status --porcelain) ]]; then
        echo "Error: There are uncommitted changes in the current branch."
        echo "Please commit or stash your changes before running 'git sync'."
        return 0
    else
        return 1
    fi
}

function gsync {
    # Check for uncommitted changes
    if has_uncommitted_changes; then
        return 1
    fi

    # Get the name of the current branch
    CURRENT_BRANCH=$(git branch --show-current)

    # Get the name of the default branch for the remote repository
    DEFAULT_BRANCH=$(get_default_branch)

    # Fetch the latest changes from the remote repository
    echo "Fetching the latest changes from the remote repository..."
    git fetch

    # Switch to the default branch
    git checkout $DEFAULT_BRANCH

    # Pull the latest changes from the default branch
    echo "Pulling the latest changes from the default branch..."
    git pull

    # Switch back to the original branch
    git checkout $CURRENT_BRANCH

    # Merge the latest changes from the $DEFAULT_BRANCH into the original branch
    echo "Merging the latest changes from the $DEFAULT_BRANCH into the $CURRENT_BRANCH..."
    git merge $DEFAULT_BRANCH
    git push
}

alias c="code ${@:-.}"

alias y="yarn"
alias ys="yarn start"

alias gf="git fetch --all --prune"
alias gcb="git checkout -b"
alias gs="git status"
alias glog="git log --decorate --graph --oneline"
alias gundo="git reset --soft HEAD~1"
alias gtag='git log --pretty=format:"%h - v%s - *%an* - %s" --decorate=short --format="%Cred %D - %Cgreen %an %Creset - %s" --abbrev=0 $1...$2 main'
